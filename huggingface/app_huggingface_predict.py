import streamlit as st
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from huggingface.use_huggingface_model import load_models_from_hub, predict_customer_cluster_hub

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="Ph√¢n c·ª•m kh√°ch h√†ng - Hugging Face",
    page_icon="ü§ó",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# CSS ƒë·ªÉ t·ªëi ∆∞u cho laptop 13 inch
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 1000px;
    }
    .stSelectbox > div > div {
        font-size: 14px;
    }
    .stNumberInput > div > div > input {
        font-size: 14px;
    }
    h1 {
        font-size: 2rem !important;
        margin-bottom: 1rem !important;
    }
    h2 {
        font-size: 1.5rem !important;
        margin-bottom: 0.8rem !important;
    }
    h3 {
        font-size: 1.2rem !important;
        margin-bottom: 0.6rem !important;
    }
</style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("ü§ó Ph√¢n c·ª•m kh√°ch h√†ng - Hugging Face")
st.markdown("Ph√¢n lo·∫°i kh√°ch h√†ng s·ª≠ d·ª•ng m√¥ h√¨nh t·ª´ Hugging Face Hub.")

# Load models t·ª´ Hugging Face Hub
@st.cache_resource
def get_models():
    """Cache models ƒë·ªÉ tr√°nh load l·∫°i m·ªói l·∫ßn refresh trang"""
    return load_models_from_hub("duonggbill/dbill-customer-model")

# T·∫°o sidebar
st.sidebar.header("Ch·ªçn ch·ª©c nƒÉng")
option = st.sidebar.radio(
    "B·∫°n mu·ªën l√†m g√¨?",
    ["D·ª± ƒëo√°n cho kh√°ch h√†ng m·ªõi", "Ph√¢n t√≠ch file kh√°ch h√†ng", "Th√¥ng tin v·ªÅ c√°c c·ª•m"]
)

# Load models
try:
    with st.spinner("ƒêang t·∫£i m√¥ h√¨nh t·ª´ Hugging Face Hub..."):
        models = get_models()
    st.sidebar.success("ƒê√£ t·∫£i xong c√°c m√¥ h√¨nh t·ª´ Hugging Face!")
except Exception as e:
    st.sidebar.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
    st.stop()

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c c·ª•m
if option == "Th√¥ng tin v·ªÅ c√°c c·ª•m":
    st.header("Th√¥ng tin v·ªÅ c√°c c·ª•m kh√°ch h√†ng")

    # L·∫•y th√¥ng tin v·ªÅ c√°c c·ª•m
    cluster_stats = models['cluster_stats']
    cluster_descriptions = models['cluster_descriptions']

    # Hi·ªÉn th·ªã m√¥ t·∫£ c√°c c·ª•m
    st.subheader("M√¥ t·∫£ c√°c c·ª•m")
    for cluster, description in cluster_descriptions.items():
        st.markdown(f"**C·ª•m {cluster}**: {description}")

    # T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™
    stats_data = []
    for cluster in cluster_descriptions.keys():
        stats = cluster_stats.loc[cluster]
        stats_data.append({
            'C·ª•m': cluster,
            'M√¥ t·∫£': cluster_descriptions[cluster],
            'S·ªë l∆∞·ª£ng kh√°ch h√†ng': int(stats[('age', 'count')]),
            'Tu·ªïi trung b√¨nh': round(stats[('age', 'mean')], 1),
            'ƒêi·ªÉm chi ti√™u TB': round(stats[('spending_score', 'mean')], 1),
            'T·∫ßn su·∫•t mua h√†ng TB': round(stats[('purchase_frequency', 'mean')], 1),
            'Gi√° tr·ªã ƒë∆°n h√†ng TB': round(stats[('last_purchase_amount', 'mean')], 0)
        })

    stats_df = pd.DataFrame(stats_data)
    
    # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™
    st.subheader("Th·ªëng k√™ chi ti·∫øt")
    st.dataframe(stats_df, use_container_width=True)

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë kh√°ch h√†ng theo c·ª•m
    fig_pie = px.pie(
        stats_df,
        values='S·ªë l∆∞·ª£ng kh√°ch h√†ng',
        names='M√¥ t·∫£',
        title="Ph√¢n b·ªë kh√°ch h√†ng theo c·ª•m"
    )
    st.plotly_chart(fig_pie, use_container_width=True)

# D·ª± ƒëo√°n cho kh√°ch h√†ng m·ªõi
elif option == "D·ª± ƒëo√°n cho kh√°ch h√†ng m·ªõi":
    st.header("D·ª± ƒëo√°n c·ª•m kh√°ch h√†ng")

    # T·∫°o c√°c input fields
    st.subheader("Th√¥ng tin kh√°ch h√†ng")

    col1, col2 = st.columns(2)

    with col1:
        age = st.number_input("Tu·ªïi", min_value=18, max_value=100, value=30)
        gender = st.selectbox("Gi·ªõi t√≠nh", ["Male", "Female", "Other"])
        spending_score = st.slider("ƒêi·ªÉm chi ti√™u (0-100)", 0, 100, 50)
        membership_years = st.number_input("S·ªë nƒÉm th√†nh vi√™n", min_value=0, max_value=50, value=2)

    with col2:
        purchase_frequency = st.number_input("T·∫ßn su·∫•t mua h√†ng (s·ªë l·∫ßn/nƒÉm)", min_value=0, max_value=365, value=12)
        preferred_category = st.selectbox(
            "Danh m·ª•c ∆∞a th√≠ch",
            ["Electronics", "Clothing", "Groceries", "Sports", "Home & Garden", "Beauty", "Books", "Other"]
        )
        last_purchase_amount = st.number_input("S·ªë ti·ªÅn mua h√†ng g·∫ßn nh·∫•t ($)", min_value=0.0, value=100.0)

    # T·∫°o dictionary ch·ª©a th√¥ng tin kh√°ch h√†ng
    customer_data = {
        'age': age,
        'gender': gender,
        'spending_score': spending_score,
        'membership_years': membership_years,
        'purchase_frequency': purchase_frequency,
        'preferred_category': preferred_category,
        'last_purchase_amount': last_purchase_amount
    }

    # Th√™m n√∫t ph√¢n t√≠ch
    if st.button("üîç Ph√¢n t√≠ch kh√°ch h√†ng", type="primary"):
        # D·ª± ƒëo√°n c·ª•m khi nh·∫•n n√∫t
        result = predict_customer_cluster_hub(customer_data, models)
    else:
        result = None

    if result:
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.success(f"**C·ª•m {result['cluster']}**: {result['description']}")

        # T·∫°o 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
        col1, col2 = st.columns([1, 1])

        with col1:
            st.subheader("Th·ªëng k√™ c·ª•m")
            st.write(f"**S·ªë l∆∞·ª£ng:** {result['stats'][('age', 'count')]}")
            st.write(f"**Tu·ªïi TB:** {result['stats'][('age', 'mean')]:.1f}")
            st.write(f"**Chi ti√™u TB:** {result['stats'][('spending_score', 'mean')]:.1f}")
            st.write(f"**T·∫ßn su·∫•t mua:** {result['stats'][('purchase_frequency', 'mean')]:.1f}")
            st.write(f"**Gi√° tr·ªã ƒë∆°n h√†ng:** ${result['stats'][('last_purchase_amount', 'mean')]:.0f}")

        with col2:
            st.subheader("G·ª£i √Ω marketing")
            cluster = result['cluster']
            
            # G·ª£i √Ω marketing d·ª±a tr√™n cluster
            if cluster == 0:
                st.write("üéØ **Chi·∫øn l∆∞·ª£c:** Kh√°ch h√†ng VIP")
                st.write("‚Ä¢ Ch∆∞∆°ng tr√¨nh loyalty cao c·∫•p")
                st.write("‚Ä¢ S·∫£n ph·∫©m premium")
                st.write("‚Ä¢ D·ªãch v·ª• c√° nh√¢n h√≥a")
            elif cluster == 1:
                st.write("üéØ **Chi·∫øn l∆∞·ª£c:** Ph√°t tri·ªÉn ti·ªÅm nƒÉng")
                st.write("‚Ä¢ Khuy·∫øn m√£i h·∫•p d·∫´n")
                st.write("‚Ä¢ Gi·ªõi thi·ªáu s·∫£n ph·∫©m m·ªõi")
                st.write("‚Ä¢ TƒÉng t·∫ßn su·∫•t t∆∞∆°ng t√°c")
            elif cluster == 2:
                st.write("üéØ **Chi·∫øn l∆∞·ª£c:** Kh√°ch h√†ng trung th√†nh")
                st.write("‚Ä¢ Duy tr√¨ ch·∫•t l∆∞·ª£ng d·ªãch v·ª•")
                st.write("‚Ä¢ Cross-selling")
                st.write("‚Ä¢ Ch∆∞∆°ng tr√¨nh gi·ªõi thi·ªáu b·∫°n b√®")
            else:
                st.write("üéØ **Chi·∫øn l∆∞·ª£c:** K√≠ch ho·∫°t l·∫°i")
                st.write("‚Ä¢ Khuy·∫øn m√£i ƒë·∫∑c bi·ªát")
                st.write("‚Ä¢ Email marketing")
                st.write("‚Ä¢ Kh·∫£o s√°t nhu c·∫ßu")

# Ph√¢n t√≠ch file kh√°ch h√†ng
elif option == "Ph√¢n t√≠ch file kh√°ch h√†ng":
    st.header("Ph√¢n t√≠ch file kh√°ch h√†ng")

    # H∆∞·ªõng d·∫´n ƒë·ªãnh d·∫°ng file
    st.info("""
    **H∆∞·ªõng d·∫´n:** T·∫£i l√™n file CSV ch·ª©a d·ªØ li·ªáu kh√°ch h√†ng. File ph·∫£i c√≥ c√°c c·ªôt sau:
    - age: Tu·ªïi kh√°ch h√†ng
    - gender: Gi·ªõi t√≠nh (Male/Female/Other)
    - spending_score: ƒêi·ªÉm chi ti√™u (0-100)
    - membership_years: S·ªë nƒÉm th√†nh vi√™n
    - purchase_frequency: T·∫ßn su·∫•t mua h√†ng
    - preferred_category: Danh m·ª•c ∆∞a th√≠ch
    - last_purchase_amount: S·ªë ti·ªÅn mua h√†ng g·∫ßn nh·∫•t
    """)

    # Upload file
    uploaded_file = st.file_uploader("Ch·ªçn file CSV", type=["csv"])

    if uploaded_file is not None:
        # L∆∞u file t·∫°m th·ªùi
        temp_file_path = "temp_customer_data.csv"
        with open(temp_file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc
        df_original = pd.read_csv(temp_file_path)
        st.subheader("D·ªØ li·ªáu kh√°ch h√†ng g·ªëc")
        st.dataframe(df_original)

        # Ph√¢n t√≠ch file
        if st.button("Ph√¢n t√≠ch v√† ph√¢n c·ª•m"):
            with st.spinner("ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
                # Ph√¢n t√≠ch t·ª´ng kh√°ch h√†ng
                results = []
                for _, row in df_original.iterrows():
                    customer_data = row.to_dict()
                    result = predict_customer_cluster_hub(customer_data, models)
                    if result:
                        results.append({
                            **customer_data,
                            'Cluster': result['cluster'],
                            'Cluster_Description': result['description']
                        })

                if results:
                    result_df = pd.DataFrame(results)
                    
                    # L∆∞u k·∫øt qu·∫£
                    result_file_path = "customer_clusters_result.csv"
                    result_df.to_csv(result_file_path, index=False)

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.subheader("K·∫øt qu·∫£ ph√¢n c·ª•m")
                    st.dataframe(result_df)

                    # T·∫°o bi·ªÉu ƒë·ªì ph√¢n b·ªë c·ª•m
                    st.subheader("Ph√¢n b·ªë kh√°ch h√†ng theo c·ª•m")

                    # ƒê·∫øm s·ªë l∆∞·ª£ng kh√°ch h√†ng trong m·ªói c·ª•m
                    cluster_counts = result_df['Cluster'].value_counts().reset_index()
                    cluster_counts.columns = ['Cluster', 'Count']

                    # Th√™m m√¥ t·∫£ c·ª•m
                    cluster_counts['Description'] = cluster_counts['Cluster'].map(models['cluster_descriptions'])

                    # V·∫Ω bi·ªÉu ƒë·ªì
                    fig = px.pie(
                        cluster_counts,
                        values='Count',
                        names='Description',
                        title="Ph√¢n b·ªë kh√°ch h√†ng theo c·ª•m"
                    )
                    st.plotly_chart(fig, use_container_width=True)

                    # T·∫°o n√∫t t·∫£i xu·ªëng k·∫øt qu·∫£
                    with open(result_file_path, "rb") as file:
                        st.download_button(
                            label="T·∫£i xu·ªëng k·∫øt qu·∫£ ph√¢n c·ª•m",
                            data=file,
                            file_name="customer_clusters_result.csv",
                            mime="text/csv"
                        )
                else:
                    st.error("C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch file.")

        # X√≥a file t·∫°m
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

# Footer
st.markdown("---")
st.markdown("ü§ó **·ª®ng d·ª•ng ph√¢n c·ª•m kh√°ch h√†ng - Powered by Hugging Face Hub**")
